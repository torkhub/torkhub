{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nconst sharedOptions = {\n  borderWidth: 3,\n  pointRadius: 3,\n  pointBorderWidth: 1,\n  maintainAspectRatio: true,\n  responsive: true,\n  legend: {\n    display: false\n  }\n};\nconst gridOptions = {\n  scales: {\n    xAxes: [{\n      gridLines: {\n        color: \"rgba(0,0,0,0.02)\",\n        zeroLineColor: \"rgba(0,0,0,0)\"\n      }\n    }],\n    yAxes: [{\n      gridLines: {\n        color: \"rgba(0,0,0,0)\",\n        zeroLineColor: \"rgba(0,0,0,0)\"\n      },\n      position: \"left\",\n      ticks: {\n        display: false,\n        beginAtZero: true,\n        suggestedMax: 7\n      }\n    }]\n  }\n};\nconst colors = [{\n  backgroundColor: \"rgba(88, 77, 130, 0.05)\",\n  borderColor: \"rgba(88, 77, 130, 1)\",\n  pointBackgroundColor: \"rgba(88, 77, 130, 1)\",\n  pointBorderColor: \"#fff\"\n}, {\n  backgroundColor: \"#eeeeee\",\n  borderColor: \"#eeeeee\",\n  pointBackgroundColor: \"#eeeeee\",\n  pointBorderColor: \"#fff\"\n}, {\n  backgroundColor: \"#5dcff3\",\n  borderColor: \"#5dcff3\",\n  pointBackgroundColor: \"#5dcff3\",\n  pointBorderColor: \"#fff\"\n}];\nconst labels = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\nconst datasets = [{\n  label: \"Sales\",\n  backgroundColor: \"rgba(88, 77, 130, 1)\",\n  borderColor: \"rgba(88, 77, 130, 1)\",\n  pointBackgroundColor: \"rgba(88, 77, 130, 1)\",\n  pointBorderColor: \"#fff\",\n  borderWidth: 0,\n  data: [6]\n}, _objectSpread({\n  label: \"Views\"\n}, colors[1], {\n  borderWidth: 0,\n  data: [5]\n})];\nconst data = {\n  labels: [\"Jul\"],\n  datasets\n};\n\nconst randomIntFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst chartData = max => {\n  let data = [];\n\n  for (let index = 0; index < max; index++) {\n    data.push(randomIntFromInterval(4, 6));\n  }\n\n  return data;\n};\n\nconst lineData = {\n  labels,\n  datasets: [_objectSpread({\n    label: \"Sales\"\n  }, colors[0], {\n    data: chartData(12)\n  })]\n};\nconst lineData2 = {\n  labels: [\"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n  datasets: [_objectSpread({\n    label: \"Sales\"\n  }, colors[0], {\n    data: chartData(6)\n  })]\n};\nconst dataPie = {\n  labels: [\"Download Sales\", \"In-Store Sales\", \"Mail Sales\"],\n  datasets: [{\n    data: [350, 450, 100],\n    backgroundColor: [\"#584d82\", \"#eeeeee\", \"#5cad66\"]\n  }]\n};\nconst height = 60;\nconst dahboardData = {\n  chart: {\n    type: \"line\",\n    title: \"Sales Analytics\",\n    subtitle: \"Basic\",\n    data: lineData,\n    height: height,\n    options: _objectSpread({}, sharedOptions, {}, gridOptions)\n  },\n  charts: [{\n    type: \"line\",\n    title: \"Monthly page views\",\n    subtitle: \"Basic\",\n    data: lineData2,\n    height: 180,\n    options: _objectSpread({}, sharedOptions, {}, gridOptions)\n  }, {\n    type: \"bar\",\n    title: \"Revenue\",\n    subtitle: \"Stacked\",\n    data: data,\n    height: 180,\n    options: _objectSpread({}, sharedOptions, {}, gridOptions)\n  }, {\n    type: \"pie\",\n    title: \"Monthly visitors\",\n    subtitle: \"Basic\",\n    data: dataPie,\n    height: 180,\n    options: _objectSpread({}, sharedOptions, {\n      elements: {\n        arc: {\n          borderWidth: 0.5\n        }\n      }\n    })\n  }]\n};\nexport default ((req, res) => {\n  setTimeout(() => {\n    res.json(dahboardData);\n  }, 2000);\n});","map":null,"metadata":{},"sourceType":"module"}