{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport lottie from \"lottie-web\";\nimport lottieApi from \"lottie-api/dist/lottie_api\";\nexport default class Lottie extends React.Component {\n  componentDidMount() {\n    const _this$props = this.props,\n          options = _this$props.options,\n          eventListeners = _this$props.eventListeners;\n    const loop = options.loop,\n          autoplay = options.autoplay,\n          animationData = options.animationData,\n          rendererSettings = options.rendererSettings,\n          segments = options.segments;\n    this.options = {\n      container: this.el,\n      renderer: \"svg\",\n      loop: loop !== false,\n      autoplay: autoplay !== false,\n      segments: segments !== false,\n      animationData,\n      rendererSettings\n    };\n    this.options = _objectSpread({}, this.options, {}, options);\n    this.anim = lottie.loadAnimation(this.options);\n    this.setSpeed();\n    this.setDirection();\n    this.animApi = lottieApi.createAnimationApi(this.anim);\n    this.registerEvents(eventListeners);\n    this.setAnimationControl();\n  }\n\n  UNSAFE_componentWillUpdate(nextProps\n  /* , nextState */\n  ) {\n    /* Recreate the animation handle if the data is changed */\n    if (this.options.animationData !== nextProps.options.animationData) {\n      this.deRegisterEvents(this.props.eventListeners);\n      this.destroy();\n      this.options = _objectSpread({}, this.options, {}, nextProps.options);\n      this.anim = lottie.loadAnimation(this.options);\n      this.animApi = lottieApi.createAnimationApi(this.anim);\n      this.registerEvents(nextProps.eventListeners);\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.props.isStopped) {\n      this.stop();\n    } else if (this.props.segments) {\n      const shouldForce = !!this.props.forceSegments;\n      this.playSegments(shouldForce);\n    } else {\n      this.play();\n    }\n\n    this.setAnimationControl();\n    this.pause();\n    this.setSpeed();\n    this.setDirection();\n  }\n\n  componentWillUnmount() {\n    this.deRegisterEvents(this.props.eventListeners);\n    this.destroy();\n    this.options.animationData = null;\n    this.anim = null;\n    this.animApi = null;\n  }\n\n  setSpeed() {\n    this.anim.setSpeed(this.props.speed);\n  }\n\n  setDirection() {\n    this.anim.setDirection(this.props.direction);\n  }\n\n  setAnimationControl() {\n    const animationControl = this.props.animationControl;\n\n    if (animationControl) {\n      const properties = _Object$keys(animationControl);\n\n      properties.forEach(property => {\n        const propertyPath = this.animApi.getKeyPath(property);\n        const value = animationControl[property];\n        this.animApi.addValueCallback(propertyPath, () => value);\n      });\n    }\n  }\n\n  play() {\n    this.anim.play();\n  }\n\n  playSegments(shouldForce) {\n    this.anim.playSegments(this.props.segments, shouldForce);\n  }\n\n  stop() {\n    this.anim.stop();\n  }\n\n  pause() {\n    if (this.props.isPaused && !this.anim.isPaused) {\n      this.anim.pause();\n    } else if (!this.props.isPaused && this.anim.isPaused) {\n      this.anim.pause();\n    }\n  }\n\n  destroy() {\n    this.anim.destroy();\n  }\n\n  registerEvents(eventListeners) {\n    eventListeners.forEach(eventListener => {\n      this.anim.addEventListener(eventListener.eventName, eventListener.callback);\n    });\n  }\n\n  deRegisterEvents(eventListeners) {\n    eventListeners.forEach(eventListener => {\n      this.anim.removeEventListener(eventListener.eventName, eventListener.callback);\n    });\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          width = _this$props2.width,\n          height = _this$props2.height,\n          ariaRole = _this$props2.ariaRole,\n          ariaLabel = _this$props2.ariaLabel,\n          title = _this$props2.title;\n\n    const getSize = initial => {\n      let size;\n\n      if (typeof initial === \"number\") {\n        size = \"\".concat(initial, \"px\");\n      } else {\n        size = initial || \"100%\";\n      }\n\n      return size;\n    };\n\n    const lottieStyles = _objectSpread({\n      width: getSize(width),\n      height: getSize(height),\n      overflow: \"hidden\",\n      margin: \"0 auto\",\n      outline: \"none\"\n    }, this.props.style);\n\n    return (// Bug with eslint rules https://github.com/airbnb/javascript/issues/1374\n      // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n      __jsx(\"div\", {\n        ref: c => {\n          this.el = c;\n        },\n        style: lottieStyles,\n        title: title,\n        role: ariaRole,\n        \"aria-label\": ariaLabel,\n        tabIndex: \"0\"\n      })\n    );\n  }\n\n}\nLottie.defaultProps = {\n  eventListeners: [],\n  isStopped: false,\n  isPaused: false,\n  speed: 1,\n  ariaRole: \"button\",\n  ariaLabel: \"animation\",\n  title: \"\"\n};","map":null,"metadata":{},"sourceType":"module"}