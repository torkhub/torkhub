{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nvar _jsxFileName = \"/home/andhi/code/torkhub/torkhub-app/components/core/WeatherCard.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Card, CardBody } from \"reactstrap\";\nimport { capitalize, getWeatherIcon } from \"../../lib/helpers\";\nimport Divider from \"./Divider\";\nimport PropTypes from \"prop-types\";\nimport fetch from \"../../lib/fetch\";\nimport format from \"date-fns/format\";\nimport useSWR from \"swr\";\n\nconst DescriptionItem = ({\n  title,\n  content\n}) => __jsx(\"div\", {\n  className: \"d-flex mb-2 justify-content-between align-items-center\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 3\n  }\n}, __jsx(\"span\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }\n}, title), __jsx(\"small\", {\n  className: \"px-2 d-inline-block\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }\n}, content));\n\nconst ForecastItem = ({\n  content\n}) => __jsx(\"span\", {\n  style: {\n    display: \"block\",\n    margin: \"2px 0\"\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 3\n  }\n}, content);\n\nconst WeatherCard = ({\n  city,\n  country,\n  days\n}) => {\n  const _useSWR = useSWR(\"\".concat(process.env.baseUrl, \"api/weather?city=\").concat(city, \"&country=\").concat(country, \"&days=\").concat(days), fetch),\n        data = _useSWR.data,\n        error = _useSWR.error;\n\n  if (error) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 21\n    }\n  }, \"Failed to load data\");\n  if (!data) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 21\n    }\n  }, \"Loading...\");\n  return data && __jsx(Card, {\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, __jsx(CardBody, {\n    className: \"pb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"d-flex mb-4 justify-content-between align-items-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, \"//\", __jsx(\"h5\", {\n    className: \"mb-0 font-weight-bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }\n  }, \"\".concat(data.city.name, \", \").concat(data.city.country)), __jsx(\"h6\", {\n    className: \"mb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 15\n    }\n  }, format(data.list[0].dt * 1000, \"MMMM Do YYYY\")), __jsx(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 15\n    }\n  }, capitalize(data.list[0].weather[0].description))), __jsx(\"div\", {\n    className: \"text-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, __jsx(\"h3\", {\n    className: \"font-weight-light mb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 15\n    }\n  }, __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }, data.list[0].main.temp, \"\\xB0\")))), __jsx(\"div\", {\n    className: \"d-flex justify-content-between align-items-center\",\n    style: {\n      flexWrap: \"wrap\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }, _Object$keys(data.list[0].main).map((key, index) => __jsx(\"div\", {\n    key: index,\n    style: {\n      width: \"50%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 15\n    }\n  }, __jsx(DescriptionItem, {\n    title: capitalize(key.replace(/_/g, \" \")),\n    content: data.list[0].main[key],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }))))), __jsx(Divider, {\n    text: \"Forecast\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }), __jsx(CardBody, {\n    className: \"pt-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"text-center justify-content-between align-items-center d-flex\",\n    style: {\n      flexFlow: \"initial\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, data.list.map((day, index) => index !== 0 && __jsx(\"div\", {\n    className: \"text-center mb-0 d-flex align-items-center justify-content-center flex-column\",\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 19\n    }\n  }, __jsx(ForecastItem, {\n    content: format(day.dt * 1000, \"ddd\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 21\n    }\n  }), __jsx(ForecastItem, {\n    content: day.weather.description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 21\n    }\n  }), __jsx(ForecastItem, {\n    content: getWeatherIcon(day.weather[0].icon, 24, \"rgba(0,0,0,.87)\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 21\n    }\n  }), __jsx(ForecastItem, {\n    content: \"\".concat(day.main.temp, \"\\xB0\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }\n  }))))));\n};\n\nWeatherCard.propTypes = {\n  city: PropTypes.string,\n  country: PropTypes.string,\n  days: PropTypes.number\n};\nexport default WeatherCard;","map":{"version":3,"sources":["/home/andhi/code/torkhub/torkhub-app/components/core/WeatherCard.js"],"names":["Card","CardBody","capitalize","getWeatherIcon","Divider","PropTypes","fetch","format","useSWR","DescriptionItem","title","content","ForecastItem","display","margin","WeatherCard","city","country","days","process","env","baseUrl","data","error","name","list","dt","weather","description","main","temp","flexWrap","map","key","index","width","replace","flexFlow","day","icon","propTypes","string","number"],"mappings":"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","sourcesContent":["import { Card, CardBody } from \"reactstrap\";\nimport { capitalize, getWeatherIcon } from \"../../lib/helpers\";\n\nimport Divider from \"./Divider\";\nimport PropTypes from \"prop-types\";\nimport fetch from \"../../lib/fetch\";\nimport format from \"date-fns/format\";\nimport useSWR from \"swr\";\n\nconst DescriptionItem = ({ title, content }) => (\n  <div className=\"d-flex mb-2 justify-content-between align-items-center\">\n    <span>{title}</span>\n    <small className=\"px-2 d-inline-block\">{content}</small>\n  </div>\n);\n\nconst ForecastItem = ({ content }) => (\n  <span\n    style={{\n      display: \"block\",\n      margin: \"2px 0\"\n    }}\n  >\n    {content}\n  </span>\n);\n\nconst WeatherCard = ({ city, country, days }) => {\n  const { data, error } = useSWR(\n    `${process.env.baseUrl}api/weather?city=${city}&country=${country}&days=${days}`,\n    fetch\n  );\n\n  if (error) return <div>Failed to load data</div>;\n  if (!data) return <div>Loading...</div>;\n\n  return (\n    data && (\n      <Card className=\"mb-4\">\n        <CardBody className=\"pb-0\">\n          <div className=\"d-flex mb-4 justify-content-between align-items-center\">\n            <div>\n              //<h5 className=\"mb-0 font-weight-bold\">{`${data.city.name}, ${data.city.country}`}</h5>\n              <h6 className=\"mb-0\">\n                {format(data.list[0].dt * 1000, \"MMMM Do YYYY\")}\n              </h6>\n              <small>{capitalize(data.list[0].weather[0].description)}</small>\n            </div>\n            <div className=\"text-right\">\n              <h3 className=\"font-weight-light mb-0\">\n                <span>{data.list[0].main.temp}&deg;</span>\n              </h3>\n            </div>\n          </div>\n          <div\n            className=\"d-flex justify-content-between align-items-center\"\n            style={{ flexWrap: \"wrap\" }}\n          >\n            {Object.keys(data.list[0].main).map((key, index) => (\n              <div key={index} style={{ width: \"50%\" }}>\n                <DescriptionItem\n                  title={capitalize(key.replace(/_/g, \" \"))}\n                  content={data.list[0].main[key]}\n                />\n              </div>\n            ))}\n          </div>\n        </CardBody>\n        <Divider text=\"Forecast\" />\n        <CardBody className=\"pt-0\">\n          <div\n            className=\"text-center justify-content-between align-items-center d-flex\"\n            style={{ flexFlow: \"initial\" }}\n          >\n            {data.list.map(\n              (day, index) =>\n                index !== 0 && (\n                  <div\n                    className=\"text-center mb-0 d-flex align-items-center justify-content-center flex-column\"\n                    key={index}\n                  >\n                    <ForecastItem content={format(day.dt * 1000, \"ddd\")} />\n                    <ForecastItem content={day.weather.description} />\n                    <ForecastItem\n                      content={getWeatherIcon(\n                        day.weather[0].icon,\n                        24,\n                        \"rgba(0,0,0,.87)\"\n                      )}\n                    />\n                    <ForecastItem content={`${day.main.temp}°`} />\n                  </div>\n                )\n            )}\n          </div>\n        </CardBody>\n      </Card>\n    )\n  );\n};\n\nWeatherCard.propTypes = {\n  city: PropTypes.string,\n  country: PropTypes.string,\n  days: PropTypes.number\n};\n\nexport default WeatherCard;\n"]},"metadata":{},"sourceType":"module"}