{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/home/andhi/code/torkhub/torkhub-app/components/core/taskboard/TaskItem.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Carousel, CarouselIndicators, CarouselItem } from \"reactstrap\";\nimport { useState } from \"react\";\n\nconst TaskItem = ({\n  task,\n  provided\n}) => {\n  const {\n    0: activeIndex,\n    1: setActiveIndex\n  } = useState(0);\n  const {\n    0: animating,\n    1: setAnimating\n  } = useState(false);\n\n  const next = () => {\n    if (animating) return;\n    const nextIndex = activeIndex === task.images.length - 1 ? 0 : activeIndex + 1;\n    setActiveIndex(nextIndex);\n  };\n\n  const previous = () => {\n    if (animating) return;\n    const nextIndex = activeIndex === 0 ? task.images.length - 1 : activeIndex - 1;\n    setActiveIndex(nextIndex);\n  };\n\n  const goToIndex = newIndex => {\n    if (animating) return;\n    setActiveIndex(newIndex);\n  };\n\n  return __jsx(\"div\", _extends({\n    className: `app-taskboard-task ${task.color ? task.color : \"\"}`,\n    ref: provided.innerRef\n  }, provided.draggableProps, provided.dragHandleProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }), __jsx(\"div\", {\n    className: \"p-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, __jsx(\"p\", {\n    className: \"mb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, task.title), __jsx(\"small\", {\n    className: `text-muted d-block ${task.images ? \"mb-2\" : \"\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, task.description), task.images && __jsx(\"div\", {\n    className: \"cover\",\n    style: {\n      height: 150\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }, __jsx(Carousel, {\n    activeIndex: activeIndex,\n    next: next,\n    previous: previous,\n    className: \"overflow-hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }, task.images.map((image, index) => __jsx(CarouselItem, {\n    onExiting: () => setAnimating(true),\n    onExited: () => setAnimating(false),\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    key: index,\n    className: \"image\",\n    style: {\n      backgroundImage: `url(${image})`,\n      height: 150\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 19\n    }\n  }))), __jsx(CarouselIndicators, {\n    items: task.images,\n    activeIndex: activeIndex,\n    onClickHandler: goToIndex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 15\n    }\n  })))));\n};\n\nexport default TaskItem;","map":{"version":3,"sources":["/home/andhi/code/torkhub/torkhub-app/components/core/taskboard/TaskItem.js"],"names":["Carousel","CarouselIndicators","CarouselItem","useState","TaskItem","task","provided","activeIndex","setActiveIndex","animating","setAnimating","next","nextIndex","images","length","previous","goToIndex","newIndex","color","innerRef","draggableProps","dragHandleProps","title","description","height","map","image","index","backgroundImage"],"mappings":"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","sourcesContent":["import { Carousel, CarouselIndicators, CarouselItem } from \"reactstrap\";\n\nimport { useState } from \"react\";\n\nconst TaskItem = ({ task, provided }) => {\n  const [activeIndex, setActiveIndex] = useState(0);\n  const [animating, setAnimating] = useState(false);\n\n  const next = () => {\n    if (animating) return;\n    const nextIndex =\n      activeIndex === task.images.length - 1 ? 0 : activeIndex + 1;\n    setActiveIndex(nextIndex);\n  };\n\n  const previous = () => {\n    if (animating) return;\n    const nextIndex =\n      activeIndex === 0 ? task.images.length - 1 : activeIndex - 1;\n    setActiveIndex(nextIndex);\n  };\n\n  const goToIndex = newIndex => {\n    if (animating) return;\n    setActiveIndex(newIndex);\n  };\n\n  return (\n    <div\n      className={`app-taskboard-task ${task.color ? task.color : \"\"}`}\n      ref={provided.innerRef}\n      {...provided.draggableProps}\n      {...provided.dragHandleProps}\n    >\n      <div className=\"p-2\">\n        <p className=\"mb-0\">{task.title}</p>\n        <small className={`text-muted d-block ${task.images ? \"mb-2\" : \"\"}`}>\n          {task.description}\n        </small>\n\n        {task.images && (\n          <div className=\"cover\" style={{ height: 150 }}>\n            <Carousel\n              activeIndex={activeIndex}\n              next={next}\n              previous={previous}\n              className=\"overflow-hidden\"\n            >\n              {task.images.map((image, index) => (\n                <CarouselItem\n                  onExiting={() => setAnimating(true)}\n                  onExited={() => setAnimating(false)}\n                  key={index}\n                >\n                  <div\n                    key={index}\n                    className=\"image\"\n                    style={{\n                      backgroundImage: `url(${image})`,\n                      height: 150\n                    }}\n                  />\n                </CarouselItem>\n              ))}\n              <CarouselIndicators\n                items={task.images}\n                activeIndex={activeIndex}\n                onClickHandler={goToIndex}\n              />\n            </Carousel>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TaskItem;\n"]},"metadata":{},"sourceType":"module"}