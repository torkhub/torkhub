{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nvar _jsxFileName = \"/home/andhi/code/torkhub/torkhub-app/components/Taskboard.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport reorder, { reorderQuoteMap } from \"./core/taskboard/reorder\";\nimport Column from \"./core/taskboard/Column\";\nimport fetch from \"../lib/fetch\";\nimport useSWR from \"swr\";\nimport { useState } from \"react\";\n\nconst Taskboard = () => {\n  const {\n    data,\n    error\n  } = useSWR(`${process.env.baseUrl}api/taskboard`, fetch);\n  if (error) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 21\n    }\n  }, \"Failed to load data\");\n  if (!data) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 21\n    }\n  }, \"Loading...\");\n  return __jsx(TaskboardInner, {\n    data: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 10\n    }\n  });\n};\n\nconst TaskboardInner = ({\n  data\n}) => {\n  const {\n    0: columns,\n    1: setColumn\n  } = useState(data);\n  const {\n    0: ordered,\n    1: setOrder\n  } = useState(_Object$keys(columns));\n\n  const onDragEnd = result => {\n    if (!result.destination) return;\n    const source = result.source;\n    const destination = result.destination;\n\n    if (source.droppableId === destination.droppableId && source.index === destination.index) {\n      return;\n    }\n\n    if (result.type === \"COLUMN\") {\n      const ordered = reorder(ordered, source.index, destination.index);\n      setOrder(ordered);\n      return;\n    }\n\n    const data = reorderQuoteMap({\n      quoteMap: columns,\n      source,\n      destination\n    });\n    setColumn(data.quoteMap);\n  };\n\n  return __jsx(\"div\", {\n    className: \"app-taskboard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, __jsx(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, __jsx(Droppable, {\n    droppableId: \"taskboard\",\n    type: \"COLUMN\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, provided => __jsx(\"div\", _extends({\n    ref: provided.innerRef\n  }, provided.droppableProps, {\n    className: \"h-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }), ordered.map((key, index) => __jsx(Column, {\n    key: key,\n    index: index,\n    title: key,\n    tasks: columns[key],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  }))))));\n};\n\nexport default Taskboard;","map":{"version":3,"sources":["/home/andhi/code/torkhub/torkhub-app/components/Taskboard.js"],"names":["DragDropContext","Droppable","reorder","reorderQuoteMap","Column","fetch","useSWR","useState","Taskboard","data","error","process","env","baseUrl","TaskboardInner","columns","setColumn","ordered","setOrder","onDragEnd","result","destination","source","droppableId","index","type","quoteMap","provided","innerRef","droppableProps","map","key"],"mappings":"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","sourcesContent":["import { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport reorder, { reorderQuoteMap } from \"./core/taskboard/reorder\";\n\nimport Column from \"./core/taskboard/Column\";\nimport fetch from \"../lib/fetch\";\nimport useSWR from \"swr\";\nimport { useState } from \"react\";\n\nconst Taskboard = () => {\n  const { data, error } = useSWR(\n    `${process.env.baseUrl}api/taskboard`,\n    fetch\n  );\n  if (error) return <div>Failed to load data</div>;\n  if (!data) return <div>Loading...</div>;\n  return <TaskboardInner data={data} />;\n};\n\nconst TaskboardInner = ({ data }) => {\n  const [columns, setColumn] = useState(data);\n  const [ordered, setOrder] = useState(Object.keys(columns));\n\n  const onDragEnd = result => {\n    if (!result.destination) return;\n\n    const source = result.source;\n    const destination = result.destination;\n\n    if (\n      source.droppableId === destination.droppableId &&\n      source.index === destination.index\n    ) {\n      return;\n    }\n\n    if (result.type === \"COLUMN\") {\n      const ordered = reorder(ordered, source.index, destination.index);\n\n      setOrder(ordered);\n\n      return;\n    }\n\n    const data = reorderQuoteMap({\n      quoteMap: columns,\n      source,\n      destination\n    });\n\n    setColumn(data.quoteMap);\n  };\n\n  return (\n    <div className=\"app-taskboard\">\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable droppableId=\"taskboard\" type=\"COLUMN\">\n          {provided => (\n            <div\n              ref={provided.innerRef}\n              {...provided.droppableProps}\n              className=\"h-100\"\n            >\n              {ordered.map((key, index) => (\n                <Column\n                  key={key}\n                  index={index}\n                  title={key}\n                  tasks={columns[key]}\n                />\n              ))}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </div>\n  );\n};\n\nexport default Taskboard;\n"]},"metadata":{},"sourceType":"module"}