{"ast":null,"code":"var _jsxFileName = \"/home/andhi/code/torkhub/torkhub-app/components/core/ImageStatCard.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Card, CardBody, Carousel, CarouselIndicators, CarouselItem, Col, Row } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport { useState } from \"react\";\n\nconst ImageStatCard = ({\n  images,\n  imageHeight,\n  stats\n}) => {\n  const _useState = useState(0),\n        activeIndex = _useState[0],\n        setActiveIndex = _useState[1];\n\n  const _useState2 = useState(false),\n        animating = _useState2[0],\n        setAnimating = _useState2[1];\n\n  const next = () => {\n    if (animating) return;\n    const nextIndex = activeIndex === images.length - 1 ? 0 : activeIndex + 1;\n    setActiveIndex(nextIndex);\n  };\n\n  const previous = () => {\n    if (animating) return;\n    const nextIndex = activeIndex === 0 ? images.length - 1 : activeIndex - 1;\n    setActiveIndex(nextIndex);\n  };\n\n  const goToIndex = newIndex => {\n    if (animating) return;\n    setActiveIndex(newIndex);\n  };\n\n  return __jsx(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"cover\",\n    style: {\n      height: imageHeight\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, __jsx(Carousel, {\n    activeIndex: activeIndex,\n    next: next,\n    previous: previous,\n    className: \"rounded-top overflow-hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, images.map((image, index) => __jsx(CarouselItem, {\n    onExiting: () => setAnimating(true),\n    onExited: () => setAnimating(false),\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    key: index,\n    className: \"image\",\n    style: {\n      backgroundImage: \"url(\".concat(image, \")\"),\n      height: imageHeight\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 15\n    }\n  }))), __jsx(CarouselIndicators, {\n    items: images,\n    activeIndex: activeIndex,\n    onClickHandler: goToIndex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }))), __jsx(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, stats.map((stat, index) => __jsx(Col, {\n    className: \"text-center\",\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, __jsx(\"h5\", {\n    className: \"mb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 15\n    }\n  }, stat.value), __jsx(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }\n  }, stat.title))))));\n};\n\nImageStatCard.propTypes = {\n  images: PropTypes.array.isRequired,\n  imageHeight: PropTypes.number.isRequired,\n  stats: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string,\n    value: PropTypes.number\n  })).isRequired\n};\nexport default ImageStatCard;","map":{"version":3,"sources":["/home/andhi/code/torkhub/torkhub-app/components/core/ImageStatCard.js"],"names":["Card","CardBody","Carousel","CarouselIndicators","CarouselItem","Col","Row","PropTypes","useState","ImageStatCard","images","imageHeight","stats","activeIndex","setActiveIndex","animating","setAnimating","next","nextIndex","length","previous","goToIndex","newIndex","height","map","image","index","backgroundImage","stat","value","title","propTypes","array","isRequired","number","arrayOf","shape","string"],"mappings":";;;AAAA,SACEA,IADF,EAEEC,QAFF,EAGEC,QAHF,EAIEC,kBAJF,EAKEC,YALF,EAMEC,GANF,EAOEC,GAPF,QAQO,YARP;AAUA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,WAAV;AAAuBC,EAAAA;AAAvB,CAAD,KAAoC;AAAA,oBAClBJ,QAAQ,CAAC,CAAD,CADU;AAAA,QACjDK,WADiD;AAAA,QACpCC,cADoC;;AAAA,qBAEtBN,QAAQ,CAAC,KAAD,CAFc;AAAA,QAEjDO,SAFiD;AAAA,QAEtCC,YAFsC;;AAIxD,QAAMC,IAAI,GAAG,MAAM;AACjB,QAAIF,SAAJ,EAAe;AACf,UAAMG,SAAS,GAAGL,WAAW,KAAKH,MAAM,CAACS,MAAP,GAAgB,CAAhC,GAAoC,CAApC,GAAwCN,WAAW,GAAG,CAAxE;AACAC,IAAAA,cAAc,CAACI,SAAD,CAAd;AACD,GAJD;;AAMA,QAAME,QAAQ,GAAG,MAAM;AACrB,QAAIL,SAAJ,EAAe;AACf,UAAMG,SAAS,GAAGL,WAAW,KAAK,CAAhB,GAAoBH,MAAM,CAACS,MAAP,GAAgB,CAApC,GAAwCN,WAAW,GAAG,CAAxE;AACAC,IAAAA,cAAc,CAACI,SAAD,CAAd;AACD,GAJD;;AAMA,QAAMG,SAAS,GAAGC,QAAQ,IAAI;AAC5B,QAAIP,SAAJ,EAAe;AACfD,IAAAA,cAAc,CAACQ,QAAD,CAAd;AACD,GAHD;;AAKA,SACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAuB,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAEZ;AAAV,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AACE,IAAA,WAAW,EAAEE,WADf;AAEE,IAAA,IAAI,EAAEI,IAFR;AAGE,IAAA,QAAQ,EAAEG,QAHZ;AAIE,IAAA,SAAS,EAAC,6BAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGV,MAAM,CAACc,GAAP,CAAW,CAACC,KAAD,EAAQC,KAAR,KACV,MAAC,YAAD;AACE,IAAA,SAAS,EAAE,MAAMV,YAAY,CAAC,IAAD,CAD/B;AAEE,IAAA,QAAQ,EAAE,MAAMA,YAAY,CAAC,KAAD,CAF9B;AAGE,IAAA,GAAG,EAAEU,KAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE;AACE,IAAA,GAAG,EAAEA,KADP;AAEE,IAAA,SAAS,EAAC,OAFZ;AAGE,IAAA,KAAK,EAAE;AACLC,MAAAA,eAAe,gBAASF,KAAT,MADV;AAELF,MAAAA,MAAM,EAAEZ;AAFH,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADD,CANH,EAuBE,MAAC,kBAAD;AACE,IAAA,KAAK,EAAED,MADT;AAEE,IAAA,WAAW,EAAEG,WAFf;AAGE,IAAA,cAAc,EAAEQ,SAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvBF,CADF,CADF,EAgCE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGT,KAAK,CAACY,GAAN,CAAU,CAACI,IAAD,EAAOF,KAAP,KACT,MAAC,GAAD;AAAK,IAAA,SAAS,EAAC,aAAf;AAA6B,IAAA,GAAG,EAAEA,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsBE,IAAI,CAACC,KAA3B,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQD,IAAI,CAACE,KAAb,CAFF,CADD,CADH,CADF,CAhCF,CADF;AA6CD,CAlED;;AAoEArB,aAAa,CAACsB,SAAd,GAA0B;AACxBrB,EAAAA,MAAM,EAAEH,SAAS,CAACyB,KAAV,CAAgBC,UADA;AAExBtB,EAAAA,WAAW,EAAEJ,SAAS,CAAC2B,MAAV,CAAiBD,UAFN;AAGxBrB,EAAAA,KAAK,EAAEL,SAAS,CAAC4B,OAAV,CACL5B,SAAS,CAAC6B,KAAV,CAAgB;AACdN,IAAAA,KAAK,EAAEvB,SAAS,CAAC8B,MADH;AAEdR,IAAAA,KAAK,EAAEtB,SAAS,CAAC2B;AAFH,GAAhB,CADK,EAKLD;AARsB,CAA1B;AAWA,eAAexB,aAAf","sourcesContent":["import {\n  Card,\n  CardBody,\n  Carousel,\n  CarouselIndicators,\n  CarouselItem,\n  Col,\n  Row\n} from \"reactstrap\";\n\nimport PropTypes from \"prop-types\";\nimport { useState } from \"react\";\n\nconst ImageStatCard = ({ images, imageHeight, stats }) => {\n  const [activeIndex, setActiveIndex] = useState(0);\n  const [animating, setAnimating] = useState(false);\n\n  const next = () => {\n    if (animating) return;\n    const nextIndex = activeIndex === images.length - 1 ? 0 : activeIndex + 1;\n    setActiveIndex(nextIndex);\n  };\n\n  const previous = () => {\n    if (animating) return;\n    const nextIndex = activeIndex === 0 ? images.length - 1 : activeIndex - 1;\n    setActiveIndex(nextIndex);\n  };\n\n  const goToIndex = newIndex => {\n    if (animating) return;\n    setActiveIndex(newIndex);\n  };\n\n  return (\n    <Card>\n      <div className=\"cover\" style={{ height: imageHeight }}>\n        <Carousel\n          activeIndex={activeIndex}\n          next={next}\n          previous={previous}\n          className=\"rounded-top overflow-hidden\"\n        >\n          {images.map((image, index) => (\n            <CarouselItem\n              onExiting={() => setAnimating(true)}\n              onExited={() => setAnimating(false)}\n              key={index}\n            >\n              <div\n                key={index}\n                className=\"image\"\n                style={{\n                  backgroundImage: `url(${image})`,\n                  height: imageHeight\n                }}\n              />\n            </CarouselItem>\n          ))}\n\n          <CarouselIndicators\n            items={images}\n            activeIndex={activeIndex}\n            onClickHandler={goToIndex}\n          />\n        </Carousel>\n      </div>\n      <CardBody>\n        <Row>\n          {stats.map((stat, index) => (\n            <Col className=\"text-center\" key={index}>\n              <h5 className=\"mb-0\">{stat.value}</h5>\n              <small>{stat.title}</small>\n            </Col>\n          ))}\n        </Row>\n      </CardBody>\n    </Card>\n  );\n};\n\nImageStatCard.propTypes = {\n  images: PropTypes.array.isRequired,\n  imageHeight: PropTypes.number.isRequired,\n  stats: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string,\n      value: PropTypes.number\n    })\n  ).isRequired\n};\n\nexport default ImageStatCard;\n"]},"metadata":{},"sourceType":"module"}