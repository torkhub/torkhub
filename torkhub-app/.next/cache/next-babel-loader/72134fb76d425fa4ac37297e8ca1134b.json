{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nconst sharedOptions = {\n  borderWidth: 3,\n  pointRadius: 3,\n  pointBorderWidth: 1,\n  maintainAspectRatio: true,\n  responsive: true,\n  legend: {\n    display: false\n  }\n};\nconst gridOptions = {\n  scales: {\n    xAxes: [{\n      gridLines: {\n        color: \"rgba(0,0,0,0.02)\",\n        zeroLineColor: \"rgba(0,0,0,0)\"\n      }\n    }],\n    yAxes: [{\n      gridLines: {\n        color: \"rgba(0,0,0,0)\",\n        zeroLineColor: \"rgba(0,0,0,0)\"\n      },\n      position: \"left\",\n      ticks: {\n        beginAtZero: true,\n        suggestedMax: 9\n      }\n    }]\n  }\n};\nconst stackedGridOptions = {\n  scales: {\n    xAxes: [{\n      gridLines: {\n        color: \"rgba(0,0,0,0.02)\",\n        zeroLineColor: \"rgba(0,0,0,0.02)\"\n      },\n      stacked: true\n    }],\n    yAxes: [{\n      gridLines: {\n        color: \"rgba(0,0,0,0)\",\n        zeroLineColor: \"rgba(0,0,0,0.02)\"\n      },\n      stacked: true,\n      position: \"left\",\n      ticks: {\n        beginAtZero: true,\n        suggestedMax: 9\n      }\n    }]\n  }\n};\nconst colors = [{\n  backgroundColor: \"#584d82\",\n  borderColor: \"#4d4373\",\n  pointBackgroundColor: \"#584d82\",\n  pointBorderColor: \"#fff\"\n}, {\n  backgroundColor: \"#eeeeee\",\n  borderColor: \"#eeeeee\",\n  pointBackgroundColor: \"#eeeeee\",\n  pointBorderColor: \"#fff\"\n}, {\n  backgroundColor: \"#5dcff3\",\n  borderColor: \"#5dcff3\",\n  pointBackgroundColor: \"#5dcff3\",\n  pointBorderColor: \"#fff\"\n}];\nconst labels = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"];\nconst datasets = [_objectSpread({\n  label: \"Sales\"\n}, colors[0], {\n  data: [6, 5, 8, 8, 5, 5, 4]\n}), _objectSpread({\n  label: \"Views\"\n}, colors[1], {\n  data: [5, 4, 4, 2, 6, 2, 5]\n})];\nconst data = {\n  labels,\n  datasets\n};\nconst lineData = {\n  labels,\n  datasets: [{\n    label: \"Sales\",\n    backgroundColor: \"rgba(238, 238, 238, 0.05)\",\n    borderColor: \"rgba(238, 238, 238, 1)\",\n    pointBackgroundColor: \"rgba(238, 238, 238, 1)\",\n    pointBorderColor: \"#fff\",\n    data: [6, 5, 8, 8, 5, 5, 4]\n  }, {\n    label: \"Views\",\n    backgroundColor: \"rgba(88, 77, 130, 0.05)\",\n    borderColor: \"rgba(88, 77, 130, 1)\",\n    pointBackgroundColor: \"rgba(88, 77, 130, 1)\",\n    pointBorderColor: \"#fff\",\n    data: [5, 4, 4, 2, 6, 2, 5]\n  }]\n};\nconst dataStepped = {\n  labels,\n  datasets: [_objectSpread({\n    steppedLine: true,\n    fill: false,\n    label: \"Sales\"\n  }, colors[0], {\n    data: [6, 5, 8, 8, 5, 5, 4]\n  }), _objectSpread({\n    steppedLine: true,\n    fill: false,\n    label: \"Views\"\n  }, colors[1], {\n    data: [5, 4, 4, 2, 6, 2, 5]\n  })]\n};\nconst dataPoints = {\n  labels,\n  datasets: [_objectSpread({\n    fill: false,\n    pointRadius: 10,\n    pointHoverRadius: 15,\n    showLine: false,\n    label: \"Sales\"\n  }, colors[0], {\n    data: [6, 5, 8, 8, 5, 5, 4]\n  }), _objectSpread({\n    fill: false,\n    pointRadius: 10,\n    pointHoverRadius: 15,\n    showLine: false,\n    label: \"Views\"\n  }, colors[1], {\n    data: [5, 4, 4, 2, 6, 2, 5]\n  })]\n};\nconst dataMixed = {\n  labels,\n  datasets: [_objectSpread({\n    label: \"Sales\",\n    type: \"line\",\n    data: [6, 5, 6, 8, 5, 5, 4]\n  }, colors[0], {\n    yAxisID: \"y-axis-2\"\n  }), _objectSpread({\n    type: \"bar\",\n    label: \"Visitor\",\n    data: [5, 6, 4, 3, 6, 4, 5]\n  }, colors[1], {\n    yAxisID: \"y-axis-1\"\n  })]\n};\nconst options = {\n  responsive: true,\n  tooltips: {\n    mode: \"label\"\n  },\n  elements: {\n    line: {\n      fill: false\n    }\n  },\n  scales: {\n    xAxes: [{\n      display: true,\n      gridLines: {\n        display: false\n      },\n      labels\n    }],\n    yAxes: [{\n      type: \"linear\",\n      display: true,\n      position: \"left\",\n      id: \"y-axis-1\",\n      gridLines: {\n        display: false\n      },\n      labels: {\n        show: true\n      }\n    }, {\n      type: \"linear\",\n      display: true,\n      position: \"right\",\n      id: \"y-axis-2\",\n      gridLines: {\n        display: false\n      },\n      labels: {\n        show: true\n      }\n    }]\n  }\n};\nconst dataBubble = {\n  labels: [\"January\"],\n  datasets: [_objectSpread({\n    label: \"Sales\",\n    fill: true,\n    lineTension: 0.1\n  }, colors[0], {\n    borderCapStyle: \"butt\",\n    borderDash: [],\n    borderDashOffset: 0.0,\n    borderJoinStyle: \"miter\",\n    pointBorderWidth: 1,\n    pointRadius: 1,\n    pointHitRadius: 10,\n    data: [{\n      x: 6,\n      y: 5,\n      r: 15\n    }, {\n      x: 5,\n      y: 4,\n      r: 10\n    }, {\n      x: 8,\n      y: 4,\n      r: 6\n    }, {\n      x: 8,\n      y: 4,\n      r: 6\n    }, {\n      x: 5,\n      y: 14,\n      r: 14\n    }, {\n      x: 5,\n      y: 6,\n      r: 8\n    }, {\n      x: 4,\n      y: 2,\n      r: 10\n    }],\n    borderWidth: 0.5\n  })]\n};\nconst dataDoughnut = {\n  labels: [\"Download Sales\", \"In-Store Sales\", \"Mail-Order Sales\"],\n  datasets: [{\n    data: [350, 450, 100],\n    backgroundColor: [\"#584d82\", \"#eeeeee\", \"#5cad66\"]\n  }]\n};\nconst dataPie = {\n  labels: [\"Download Sales\", \"In-Store Sales\", \"Mail Sales\"],\n  datasets: [{\n    data: [350, 450, 100],\n    backgroundColor: [\"#584d82\", \"#eeeeee\", \"#5cad66\"]\n  }]\n};\nconst dataPolar = {\n  datasets: [{\n    data: [350, 450, 100],\n    backgroundColor: [\"#584d82\", \"#eeeeee\", \"#5cad66\"]\n  }],\n  labels: [\"Download Sales\", \"In-Store Sales\", \"Mail Sales\"]\n};\nconst dataRadar = {\n  labels: [\"Eating\", \"Drinking\", \"Sleeping\", \"Designing\", \"Coding\", \"Cycling\", \"Running\"],\n  datasets: [{\n    label: \"Sales\",\n    backgroundColor: \"rgba(238, 238, 238, 0.05)\",\n    borderColor: \"rgba(238, 238, 238, 1)\",\n    pointBackgroundColor: \"rgba(238, 238, 238, 1)\",\n    pointBorderColor: \"#fff\",\n    data: [65, 59, 90, 81, 56, 55, 40]\n  }, {\n    label: \"Views\",\n    backgroundColor: \"rgba(88, 77, 130, 0.05)\",\n    borderColor: \"rgba(88, 77, 130, 1)\",\n    pointBackgroundColor: \"rgba(88, 77, 130, 1)\",\n    pointBorderColor: \"#fff\",\n    data: [28, 48, 40, 19, 96, 27, 100]\n  }]\n};\nconst height = 200;\nconst chartData = [{\n  type: \"bar\",\n  title: \"Bar\",\n  subtitle: \"Basic\",\n  data,\n  height,\n  options: _objectSpread({}, sharedOptions, {}, gridOptions)\n}, {\n  type: \"horizontalbar\",\n  title: \"Bar\",\n  subtitle: \"Horizontal\",\n  data,\n  height,\n  options: _objectSpread({}, sharedOptions, {}, gridOptions)\n}, {\n  type: \"bar\",\n  title: \"Bar\",\n  subtitle: \"Stacked\",\n  data: data,\n  height: height,\n  options: _objectSpread({}, sharedOptions, {}, gridOptions, {}, stackedGridOptions)\n}, {\n  type: \"line\",\n  title: \"Line\",\n  subtitle: \"Basic\",\n  data: lineData,\n  height: height,\n  options: _objectSpread({}, sharedOptions, {}, gridOptions)\n}, {\n  type: \"line\",\n  title: \"Line\",\n  subtitle: \"Stepped\",\n  data: dataStepped,\n  height: height,\n  options: _objectSpread({}, sharedOptions, {}, gridOptions)\n}, {\n  type: \"line\",\n  title: \"Line\",\n  subtitle: \"Points\",\n  data: dataPoints,\n  height: height,\n  options: _objectSpread({}, sharedOptions, {}, gridOptions, {\n    responsive: true,\n    elements: {\n      point: {\n        pointStyle: \"rectRot\"\n      }\n    }\n  })\n}, {\n  type: \"bar\",\n  title: \"Line and Bar\",\n  subtitle: \"Mixed\",\n  data: dataMixed,\n  height: height,\n  options: _objectSpread({}, sharedOptions, {}, gridOptions, {}, options)\n}, {\n  type: \"bubble\",\n  title: \"Misc\",\n  subtitle: \"Bubble\",\n  data: dataBubble,\n  height: height,\n  options: _objectSpread({}, sharedOptions, {}, gridOptions)\n}, {\n  type: \"doughnut\",\n  title: \"Misc\",\n  subtitle: \"Doughnut\",\n  data: dataDoughnut,\n  height: height,\n  options: _objectSpread({}, sharedOptions, {\n    elements: {\n      arc: {\n        borderWidth: 0.5\n      }\n    }\n  })\n}, {\n  type: \"pie\",\n  title: \"Misc\",\n  subtitle: \"Pie\",\n  data: dataPie,\n  height: height,\n  options: _objectSpread({}, sharedOptions, {\n    elements: {\n      arc: {\n        borderWidth: 0.5\n      }\n    }\n  })\n}, {\n  type: \"polar\",\n  title: \"Misc\",\n  subtitle: \"Polar\",\n  data: dataPolar,\n  height: height,\n  options: _objectSpread({}, sharedOptions, {\n    elements: {\n      arc: {\n        borderWidth: 0.5\n      }\n    }\n  })\n}, {\n  type: \"radar\",\n  title: \"Misc\",\n  subtitle: \"Radar\",\n  data: dataRadar,\n  height: height,\n  options: _objectSpread({}, sharedOptions)\n}];\nexport default ((req, res) => {\n  setTimeout(() => {\n    res.json(chartData);\n  }, 2000);\n});","map":null,"metadata":{},"sourceType":"module"}