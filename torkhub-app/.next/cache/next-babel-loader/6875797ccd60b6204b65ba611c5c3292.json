{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Badge, Button, CustomInput, DropdownItem, DropdownMenu, DropdownToggle, Input, InputGroup, InputGroupAddon, InputGroupText, ListGroup, ListGroupItem, Nav, NavItem, NavLink, Navbar, NavbarBrand, UncontrolledDropdown } from \"reactstrap\";\nimport useSWR, { useSWRPages } from \"swr\";\nimport AnimatedIcon from \"./AnimatedIcon\";\nimport Avatar from \"./Avatar\";\nimport Bell from \"../../public/animated-icons/globe/globe.json\";\nimport FullScreen from \"../../public/animated-icons/fullscreen/fullscreen.json\";\nimport Link from \"next/link\";\nimport Menu from \"../../public/animated-icons/menu-back/menu-back.json\";\nimport Search from \"../../public/animated-icons/search-cancel/search-cancel.json\";\nimport Settings from \"../../public/animated-icons/toggle/toggle.json\";\nimport fetch from \"../../lib/fetch\";\nimport { useAppState } from \"./AppProvider\";\n\nconst Notifications = () => {\n  const _useSWRPages = useSWRPages(\"demo-page-2\", ({\n    offset,\n    withSWR\n  }) => {\n    const _withSWR = withSWR(useSWR(\"\".concat(process.env.baseUrl, \"api/notifications?offset=\").concat(offset || 0), fetch)),\n          data = _withSWR.data,\n          error = _withSWR.error;\n\n    if (error) return __jsx(\"div\", {\n      className: \"d-flex align-items-center justify-content-between py-2 px-3\"\n    }, \"Failed to load notification data\");\n    if (!data) return __jsx(\"div\", {\n      className: \"d-flex align-items-center justify-content-between py-2 px-3\"\n    }, \"Loading...\");\n    return __jsx(ListGroup, null, data.map(notification => __jsx(ListGroupItem, {\n      tag: \"a\",\n      href: \"#\",\n      action: true,\n      className: \"w-100 d-flex flex-row align-items-center\",\n      key: notification.id\n    }, __jsx(\"span\", {\n      className: \"mr-3\"\n    }, __jsx(Avatar, {\n      size: 40,\n      src: notification.avatar,\n      alt: notification.user\n    })), __jsx(\"span\", null, notification.user, \" \", notification.subject))));\n  }, (SWR, index) => {\n    if (SWR.data && SWR.data.length === 0) return null;\n    return (index + 1) * 3;\n  }, []),\n        pages = _useSWRPages.pages,\n        isLoadingMore = _useSWRPages.isLoadingMore,\n        isReachingEnd = _useSWRPages.isReachingEnd,\n        loadMore = _useSWRPages.loadMore;\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"app-notifications-inner\"\n  }, pages), __jsx(\"div\", {\n    className: \"d-flex align-items-center justify-content-between py-2 px-3\"\n  }, __jsx(\"span\", null, __jsx(Badge, {\n    color: \"danger\",\n    pill: true\n  }, \"4\"), __jsx(\"small\", {\n    className: \"mr-auto ml-1\"\n  }, \"Notifications\")), __jsx(Button, {\n    outline: true,\n    color: \"secondary\",\n    size: \"sm\",\n    className: \"button-shadow\",\n    onClick: loadMore,\n    disabled: isReachingEnd || isLoadingMore\n  }, isLoadingMore ? \". . .\" : isReachingEnd ? \"\" : \"load more\")));\n};\n\nconst Header = ({\n  toggleOpen\n}) => {\n  const _useAppState = useAppState(),\n        _useAppState2 = _slicedToArray(_useAppState, 2),\n        state = _useAppState2[0],\n        dispatch = _useAppState2[1];\n\n  const iconSize = 18;\n  return __jsx(\"div\", {\n    className: \"app-header\"\n  }, __jsx(Navbar, {\n    className: \"bg-white\"\n  }, state.mobile && __jsx(Nav, {\n    navbar: true\n  }, __jsx(\"a\", {\n    className: \"nav-toggle\",\n    onClick: toggleOpen\n  }, __jsx(AnimatedIcon, {\n    animationData: Menu,\n    size: 24,\n    isStopped: true\n  })), __jsx(NavbarBrand, {\n    href: \"/\"\n  }, __jsx(\"svg\", {\n    width: 24,\n    height: 24\n  }, __jsx(\"use\", {\n    xlinkHref: \"#logo-icon\"\n  })))), state.topHeader && __jsx(React.Fragment, null, !state.mobile && __jsx(Nav, {\n    navbar: true\n  }, __jsx(NavbarBrand, {\n    href: \"/\"\n  }, __jsx(\"svg\", {\n    width: 24,\n    height: 24\n  }, __jsx(\"use\", {\n    xlinkHref: \"#logo-icon\"\n  })), __jsx(\"span\", {\n    className: \"ml-2\"\n  }, \"Eleven\")))), !state.mobile && __jsx(Nav, {\n    navbar: true\n  }, __jsx(NavItem, null, __jsx(Link, {\n    href: \"/calendar\",\n    as: \"\".concat(process.env.baseUrl, \"calendar\"),\n    passHref: true\n  }, __jsx(NavLink, null, \"Calendar\"))), __jsx(NavItem, null, __jsx(Link, {\n    href: \"/messages\",\n    as: \"\".concat(process.env.baseUrl, \"messages\"),\n    passHref: true\n  }, __jsx(NavLink, null, \"Messages\")))), __jsx(InputGroup, {\n    className: \"search d-none d-sm-flex\"\n  }, __jsx(InputGroupAddon, {\n    addonType: \"prepend\"\n  }, __jsx(InputGroupText, null, __jsx(AnimatedIcon, {\n    animationData: Search,\n    size: 20,\n    isStopped: true\n  }))), __jsx(Input, {\n    placeholder: \"Search dashboard\"\n  })), __jsx(Nav, {\n    className: \"ml-auto menu-right\",\n    navbar: true\n  }, __jsx(NavItem, null, __jsx(NavLink, {\n    onClick: () => dispatch({\n      type: \"toggleFullscreen\"\n    })\n  }, __jsx(AnimatedIcon, {\n    animationData: FullScreen,\n    size: iconSize\n  }))), __jsx(UncontrolledDropdown, {\n    nav: true,\n    inNavbar: true\n  }, __jsx(DropdownToggle, {\n    nav: true\n  }, __jsx(AnimatedIcon, {\n    animationData: Settings,\n    size: iconSize\n  })), __jsx(DropdownMenu, {\n    right: true,\n    className: \"app-settings\"\n  }, __jsx(DropdownItem, null, \"Settings\"), __jsx(DropdownItem, {\n    divider: true,\n    className: \"m-0\"\n  }), __jsx(DropdownItem, {\n    className: \"d-flex align-items-center justify-content-between\"\n  }, __jsx(\"label\", {\n    htmlFor: \"darkModeOption\",\n    className: \"m-0\"\n  }, \"Dark mode\"), __jsx(CustomInput, {\n    type: \"switch\",\n    id: \"darkModeOption\",\n    name: \"darkModeOption\",\n    checked: state.darkMode,\n    onChange: e => dispatch({\n      type: \"toggleDarkMode\"\n    })\n  })), __jsx(DropdownItem, {\n    className: \"d-flex align-items-center justify-content-between\"\n  }, __jsx(\"label\", {\n    htmlFor: \"boxedOption\",\n    className: \"m-0\"\n  }, \"Boxed layout\"), __jsx(CustomInput, {\n    type: \"switch\",\n    id: \"boxedOption\",\n    name: \"boxedOption\",\n    checked: state.boxed,\n    onChange: e => dispatch({\n      type: \"toggleBoxed\"\n    })\n  })), __jsx(DropdownItem, {\n    className: \"d-flex align-items-center justify-content-between\"\n  }, __jsx(\"label\", {\n    htmlFor: \"stickyHeaderOption\",\n    className: \"m-0\"\n  }, \"Sticky header\"), __jsx(CustomInput, {\n    type: \"switch\",\n    id: \"stickyHeaderOption\",\n    name: \"stickyHeaderOption\",\n    checked: state.stickyHeader,\n    onChange: e => dispatch({\n      type: \"toggleStickyHeader\"\n    })\n  })), __jsx(DropdownItem, {\n    className: \"d-flex align-items-center justify-content-between\"\n  }, __jsx(\"label\", {\n    htmlFor: \"stickySidebarOption\",\n    className: \"m-0\"\n  }, \"Sticky sidebar\"), __jsx(CustomInput, {\n    type: \"switch\",\n    id: \"stickySidebarOption\",\n    name: \"stickySidebarOption\",\n    checked: state.stickySidebar,\n    onChange: e => dispatch({\n      type: \"toggleStickySidebar\"\n    })\n  })), __jsx(DropdownItem, {\n    className: \"d-flex align-items-center justify-content-between\"\n  }, __jsx(\"label\", {\n    htmlFor: \"collapsedSidebarOption\",\n    className: \"m-0\"\n  }, \"Collapsed sidebar\"), __jsx(CustomInput, {\n    type: \"switch\",\n    id: \"collapsedSidebarOption\",\n    name: \"collapsedSidebarOption\",\n    checked: state.collapsed,\n    onChange: e => dispatch({\n      type: \"toggleCollapsed\"\n    })\n  })), __jsx(DropdownItem, {\n    className: \"d-flex align-items-center justify-content-between\"\n  }, __jsx(\"label\", {\n    htmlFor: \"topHeaderOption\",\n    className: \"m-0\"\n  }, \"Top header\"), __jsx(CustomInput, {\n    type: \"switch\",\n    id: \"topHeaderOption\",\n    name: \"topHeaderOption\",\n    checked: state.topHeader,\n    onChange: e => dispatch({\n      type: \"toggleTopHeader\"\n    })\n  })))), __jsx(UncontrolledDropdown, {\n    nav: true,\n    inNavbar: true\n  }, __jsx(DropdownToggle, {\n    nav: true\n  }, __jsx(AnimatedIcon, {\n    animationData: Bell,\n    size: iconSize\n  }), __jsx(Badge, {\n    color: \"danger\",\n    pill: true,\n    className: \"badge-top\"\n  }, \"6\")), __jsx(DropdownMenu, {\n    right: true,\n    className: \"app-notifications\"\n  }, __jsx(DropdownItem, null, \"Notifications\"), __jsx(DropdownItem, {\n    divider: true,\n    className: \"m-0\"\n  }), __jsx(Notifications, null))), __jsx(UncontrolledDropdown, {\n    nav: true,\n    inNavbar: true\n  }, __jsx(DropdownToggle, {\n    nav: true\n  }, __jsx(Avatar, {\n    size: 32,\n    src: \"\".concat(process.env.baseUrl, \"images/avatar.jpg\"),\n    alt: \"avatar\"\n  })), __jsx(DropdownMenu, {\n    right: true\n  }, __jsx(DropdownItem, null, \"Settings\"), __jsx(DropdownItem, null, \"Profile\"), __jsx(DropdownItem, null, \"Notifications\"), __jsx(DropdownItem, {\n    divider: true\n  }), __jsx(DropdownItem, null, \"Signout\"))))));\n};\n\nexport default Header;","map":null,"metadata":{},"sourceType":"module"}