{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/andhi/code/torkhub/torkhub-app/components/core/Avatar.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Img from \"react-image\";\nimport PropTypes from \"prop-types\";\nconst bootstrapColors = [\"primary\", \"success\", \"warning\", \"info\", \"secondary\", \"dark\", \"danger\"];\n\nconst Avatar = ({\n  src,\n  alt = \"image\",\n  size = 32,\n  status,\n  style\n}) => {\n  const circle = status && __jsx(\"span\", {\n    className: `text-${status} border-white status`,\n    style: {\n      width: size / 3,\n      height: size / 3\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  });\n\n  const iconSize = size ? size + \"px\" : \"32px\";\n  return __jsx(\"span\", {\n    className: \"position-relative d-flex rounded-circle\",\n    style: _objectSpread({\n      width: iconSize,\n      height: iconSize\n    }, style),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, __jsx(Img, {\n    src: src,\n    alt: alt,\n    width: iconSize,\n    height: iconSize,\n    className: \"rounded-circle\",\n    unloader: __jsx(\"span\", {\n      className: `d-flex align-items-center justify-content-center w-100 h-100 bg-${bootstrapColors[Math.floor(Math.random() * bootstrapColors.length)]} text-light rounded-circle`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }\n    }, alt.charAt(0)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }), status && circle);\n};\n\nAvatar.propTypes = {\n  src: PropTypes.string,\n  alt: PropTypes.string,\n  size: PropTypes.number.isRequired,\n  status: PropTypes.string,\n  style: PropTypes.string\n};\nexport default Avatar;","map":{"version":3,"sources":["/home/andhi/code/torkhub/torkhub-app/components/core/Avatar.js"],"names":["Img","PropTypes","bootstrapColors","Avatar","src","alt","size","status","style","circle","width","height","iconSize","Math","floor","random","length","charAt","propTypes","string","number","isRequired"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,MAAMC,eAAe,GAAG,CACtB,SADsB,EAEtB,SAFsB,EAGtB,SAHsB,EAItB,MAJsB,EAKtB,WALsB,EAMtB,MANsB,EAOtB,QAPsB,CAAxB;;AAUA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,GAAF;AAAOC,EAAAA,GAAG,GAAG,OAAb;AAAsBC,EAAAA,IAAI,GAAG,EAA7B;AAAiCC,EAAAA,MAAjC;AAAyCC,EAAAA;AAAzC,CAAD,KAAsD;AACnE,QAAMC,MAAM,GAAGF,MAAM,IACnB;AACE,IAAA,SAAS,EAAG,QAAOA,MAAO,sBAD5B;AAEE,IAAA,KAAK,EAAE;AAAEG,MAAAA,KAAK,EAAEJ,IAAI,GAAG,CAAhB;AAAmBK,MAAAA,MAAM,EAAEL,IAAI,GAAG;AAAlC,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;;AAOA,QAAMM,QAAQ,GAAGN,IAAI,GAAGA,IAAI,GAAG,IAAV,GAAiB,MAAtC;AAEA,SACE;AACE,IAAA,SAAS,EAAC,yCADZ;AAEE,IAAA,KAAK;AAAII,MAAAA,KAAK,EAAEE,QAAX;AAAqBD,MAAAA,MAAM,EAAEC;AAA7B,OAA0CJ,KAA1C,CAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIE,MAAC,GAAD;AACE,IAAA,GAAG,EAAEJ,GADP;AAEE,IAAA,GAAG,EAAEC,GAFP;AAGE,IAAA,KAAK,EAAEO,QAHT;AAIE,IAAA,MAAM,EAAEA,QAJV;AAKE,IAAA,SAAS,EAAC,gBALZ;AAME,IAAA,QAAQ,EACN;AACE,MAAA,SAAS,EAAG,mEACVV,eAAe,CACbW,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBb,eAAe,CAACc,MAA3C,CADa,CAGhB,4BALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOGX,GAAG,CAACY,MAAJ,CAAW,CAAX,CAPH,CAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EAsBGV,MAAM,IAAIE,MAtBb,CADF;AA0BD,CApCD;;AAsCAN,MAAM,CAACe,SAAP,GAAmB;AACjBd,EAAAA,GAAG,EAAEH,SAAS,CAACkB,MADE;AAEjBd,EAAAA,GAAG,EAAEJ,SAAS,CAACkB,MAFE;AAGjBb,EAAAA,IAAI,EAAEL,SAAS,CAACmB,MAAV,CAAiBC,UAHN;AAIjBd,EAAAA,MAAM,EAAEN,SAAS,CAACkB,MAJD;AAKjBX,EAAAA,KAAK,EAAEP,SAAS,CAACkB;AALA,CAAnB;AAQA,eAAehB,MAAf","sourcesContent":["import Img from \"react-image\";\nimport PropTypes from \"prop-types\";\n\nconst bootstrapColors = [\n  \"primary\",\n  \"success\",\n  \"warning\",\n  \"info\",\n  \"secondary\",\n  \"dark\",\n  \"danger\"\n];\n\nconst Avatar = ({ src, alt = \"image\", size = 32, status, style }) => {\n  const circle = status && (\n    <span\n      className={`text-${status} border-white status`}\n      style={{ width: size / 3, height: size / 3 }}\n    ></span>\n  );\n\n  const iconSize = size ? size + \"px\" : \"32px\";\n\n  return (\n    <span\n      className=\"position-relative d-flex rounded-circle\"\n      style={{ width: iconSize, height: iconSize, ...style }}\n    >\n      <Img\n        src={src}\n        alt={alt}\n        width={iconSize}\n        height={iconSize}\n        className=\"rounded-circle\"\n        unloader={\n          <span\n            className={`d-flex align-items-center justify-content-center w-100 h-100 bg-${\n              bootstrapColors[\n                Math.floor(Math.random() * bootstrapColors.length)\n              ]\n            } text-light rounded-circle`}\n          >\n            {alt.charAt(0)}\n          </span>\n        }\n      />\n      {status && circle}\n    </span>\n  );\n};\n\nAvatar.propTypes = {\n  src: PropTypes.string,\n  alt: PropTypes.string,\n  size: PropTypes.number.isRequired,\n  status: PropTypes.string,\n  style: PropTypes.string\n};\n\nexport default Avatar;\n"]},"metadata":{},"sourceType":"module"}