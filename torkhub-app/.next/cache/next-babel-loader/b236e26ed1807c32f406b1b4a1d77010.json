{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Card, CardBody, CardHeader } from \"reactstrap\";\nimport SimpleReactValidator from \"simple-react-validator\";\nimport moment from \"moment\";\nimport { useState } from \"react\";\nlet validator = new SimpleReactValidator({\n  autoForceUpdate: this,\n  className: \"text-danger\",\n  messages: {\n    email: \"That is not an email.\"\n  },\n  validators: {\n    ip: {\n      message: \"The :attribute must be a valid IP address.\",\n      rule: function (val, params, validator) {\n        return validator.helpers.testRegex(val, /^(?!0)(?!.*\\.$)((1?\\d?\\d|25[0-5]|2[0-4]\\d)(\\.|$)){4}$/i) && params.indexOf(val) === -1;\n      }\n    }\n  }\n});\n\nconst Validation = () => {\n  const {\n    0: ajaxError\n  } = useState(\"There was a server error the prevented the form from submitting.\");\n  const {\n    0: inputs,\n    1: setInputs\n  } = useState({});\n\n  const submitForm = () => {\n    if (validator.allValid()) {\n      alert(\"You submitted the form and stuff!\");\n    } else {\n      validator.showMessages();\n    }\n  };\n\n  const handleInputChange = event => {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const name = target.name;\n    setInputs(_objectSpread({}, inputs, {\n      [`${name}`]: value\n    }));\n  };\n\n  const example = (name, value, rules, type = \"text\") => {\n    value = value || inputs[name];\n    rules = rules || name;\n    return __jsx(\"div\", {\n      className: \"col-sm-6 col-md-4\"\n    }, __jsx(\"div\", {\n      className: \"form-group\"\n    }, __jsx(\"label\", null, name), __jsx(\"input\", {\n      className: \"form-control\",\n      type: type,\n      name: name,\n      value: inputs[name],\n      onChange: handleInputChange,\n      onBlur: () => validator.showMessageFor(name)\n    }), validator.message(name, value, rules)));\n  };\n\n  return __jsx(Card, null, __jsx(CardHeader, null, \"Validations\"), __jsx(CardBody, null, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-sm-6 col-md-4\"\n  }, __jsx(\"div\", {\n    className: \"form-check\"\n  }, __jsx(\"label\", {\n    className: \"form-check-label\"\n  }, __jsx(\"input\", {\n    type: \"checkbox\",\n    name: \"accepted\",\n    className: \"form-check-input\",\n    checked: inputs.accepted,\n    onChange: handleInputChange\n  }), __jsx(\"span\", null, \"accepted\")), validator.message(\"checkbox\", inputs.accepted, \"accepted\"))), example(\"after\", inputs.after && moment(inputs.after, \"YYYY-MM-DD\"), [{\n    after: moment().add(1, \"month\")\n  }], \"date\"), example(\"after_or_equal\", inputs.after_or_equal && moment(inputs.after_or_equal, \"YYYY-MM-DD\"), [{\n    after_or_equal: moment().add(1, \"month\")\n  }], \"date\"), example(\"alpha\"), example(\"alpha_space\"), example(\"alpha_num\"), example(\"alpha_num_space\"), example(\"alpha_num_dash\"), example(\"alpha_num_dash_space\"), example(\"array\"), example(\"before\", inputs.before && moment(inputs.before, \"YYYY-MM-DD\"), [{\n    before: moment().add(1, \"month\")\n  }], \"date\"), example(\"before_or_equal\", inputs.before_or_equal && moment(inputs.before_or_equal, \"YYYY-MM-DD\"), [{\n    before_or_equal: moment().add(1, \"month\")\n  }], \"date\"), example(\"between\", inputs.between, \"between:10,20\"), example(\"boolean\"), example(\"card_exp\"), example(\"card_num\"), example(\"currency\"), example(\"date\", inputs.date && moment(inputs.date, \"YYYY-MM-DD\"), \"date\", \"date\"), example(\"date_equals\", inputs.date_equals && moment(inputs.date_equals, \"YYYY-MM-DD\"), [{\n    date_equals: moment()\n  }], \"date\"), example(\"email\"), example(\"in\", inputs.in, \"in:stu,stuart,stuman\"), example(\"integer\"), example(\"max\", inputs.max, \"max:20\"), example(\"min\", inputs.min, \"min:20,num\"), example(\"not_in\", inputs.not_in, [\"required\", {\n    not_in: [\"stu\", \"stuart\"]\n  }]), example(\"not_regex\", inputs.not_regex, \"not_regex:^A*$\"), example(\"numeric\"), example(\"phone\"), example(\"regex\", inputs.regex, \"regex:^A*$\"), example(\"required\"), example(\"size\", inputs.size, \"size:20,num\"), example(\"string\"), example(\"typeof\", inputs.typeof, [{\n    typeof: \"string\"\n  }]), example(\"url\"), example(\"ip\", inputs.ip, \"ip:127.0.0.1\")), validator.messageWhenPresent(ajaxError, {\n    element: message => __jsx(\"div\", {\n      className: \"alert alert-warning\",\n      role: \"alert\"\n    }, message)\n  }), __jsx(\"button\", {\n    className: \"btn btn-primary\",\n    onClick: submitForm\n  }, \"Submit\")));\n};\n\nexport default Validation;","map":null,"metadata":{},"sourceType":"module"}