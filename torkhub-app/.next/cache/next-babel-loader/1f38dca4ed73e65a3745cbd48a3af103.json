{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = _Array$from(list);\n\n  const _result$splice = result.splice(startIndex, 1),\n        _result$splice2 = _slicedToArray(_result$splice, 1),\n        removed = _result$splice2[0];\n\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n\nexport default reorder;\nexport const reorderQuoteMap = ({\n  quoteMap,\n  source,\n  destination\n}) => {\n  const current = [...quoteMap[source.droppableId]];\n  const next = [...quoteMap[destination.droppableId]];\n  const target = current[source.index];\n\n  if (source.droppableId === destination.droppableId) {\n    const reordered = reorder(current, source.index, destination.index);\n\n    const result = _objectSpread({}, quoteMap, {\n      [source.droppableId]: reordered\n    });\n\n    return {\n      quoteMap: result\n    };\n  }\n\n  current.splice(source.index, 1);\n  next.splice(destination.index, 0, target);\n\n  const result = _objectSpread({}, quoteMap, {\n    [source.droppableId]: current,\n    [destination.droppableId]: next\n  });\n\n  return {\n    quoteMap: result\n  };\n};","map":{"version":3,"sources":["/home/andhi/code/torkhub/torkhub-app/components/core/taskboard/reorder.js"],"names":["reorder","list","startIndex","endIndex","result","splice","removed","reorderQuoteMap","quoteMap","source","destination","current","droppableId","next","target","index","reordered"],"mappings":";;;;;;;;;;;;;;AAAA;AACA,MAAMA,OAAO,GAAG,CAACC,IAAD,EAAOC,UAAP,EAAmBC,QAAnB,KAAgC;AAC9C,QAAMC,MAAM,GAAG,YAAWH,IAAX,CAAf;;AAD8C,yBAE5BG,MAAM,CAACC,MAAP,CAAcH,UAAd,EAA0B,CAA1B,CAF4B;AAAA;AAAA,QAEvCI,OAFuC;;AAG9CF,EAAAA,MAAM,CAACC,MAAP,CAAcF,QAAd,EAAwB,CAAxB,EAA2BG,OAA3B;AAEA,SAAOF,MAAP;AACD,CAND;;AAQA,eAAeJ,OAAf;AAEA,OAAO,MAAMO,eAAe,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,MAAZ;AAAoBC,EAAAA;AAApB,CAAD,KAAuC;AACpE,QAAMC,OAAO,GAAG,CAAC,GAAGH,QAAQ,CAACC,MAAM,CAACG,WAAR,CAAZ,CAAhB;AACA,QAAMC,IAAI,GAAG,CAAC,GAAGL,QAAQ,CAACE,WAAW,CAACE,WAAb,CAAZ,CAAb;AACA,QAAME,MAAM,GAAGH,OAAO,CAACF,MAAM,CAACM,KAAR,CAAtB;;AAEA,MAAIN,MAAM,CAACG,WAAP,KAAuBF,WAAW,CAACE,WAAvC,EAAoD;AAClD,UAAMI,SAAS,GAAGhB,OAAO,CAACW,OAAD,EAAUF,MAAM,CAACM,KAAjB,EAAwBL,WAAW,CAACK,KAApC,CAAzB;;AACA,UAAMX,MAAM,qBACPI,QADO;AAEV,OAACC,MAAM,CAACG,WAAR,GAAsBI;AAFZ,MAAZ;;AAIA,WAAO;AACLR,MAAAA,QAAQ,EAAEJ;AADL,KAAP;AAGD;;AAEDO,EAAAA,OAAO,CAACN,MAAR,CAAeI,MAAM,CAACM,KAAtB,EAA6B,CAA7B;AACAF,EAAAA,IAAI,CAACR,MAAL,CAAYK,WAAW,CAACK,KAAxB,EAA+B,CAA/B,EAAkCD,MAAlC;;AAEA,QAAMV,MAAM,qBACPI,QADO;AAEV,KAACC,MAAM,CAACG,WAAR,GAAsBD,OAFZ;AAGV,KAACD,WAAW,CAACE,WAAb,GAA2BC;AAHjB,IAAZ;;AAMA,SAAO;AACLL,IAAAA,QAAQ,EAAEJ;AADL,GAAP;AAGD,CA5BM","sourcesContent":["// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nexport default reorder;\n\nexport const reorderQuoteMap = ({ quoteMap, source, destination }) => {\n  const current = [...quoteMap[source.droppableId]];\n  const next = [...quoteMap[destination.droppableId]];\n  const target = current[source.index];\n\n  if (source.droppableId === destination.droppableId) {\n    const reordered = reorder(current, source.index, destination.index);\n    const result = {\n      ...quoteMap,\n      [source.droppableId]: reordered\n    };\n    return {\n      quoteMap: result\n    };\n  }\n\n  current.splice(source.index, 1);\n  next.splice(destination.index, 0, target);\n\n  const result = {\n    ...quoteMap,\n    [source.droppableId]: current,\n    [destination.droppableId]: next\n  };\n\n  return {\n    quoteMap: result\n  };\n};\n"]},"metadata":{},"sourceType":"module"}