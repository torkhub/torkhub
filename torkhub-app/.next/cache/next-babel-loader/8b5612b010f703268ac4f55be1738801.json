{"ast":null,"code":"import _Map from \"@babel/runtime-corejs2/core-js/map\";\nimport isDocumentVisible from './libs/is-document-visible';\nimport isOnline from './libs/is-online'; // Cache\n\nconst __cache = new _Map();\n\nfunction cacheGet(key) {\n  return __cache.get(key);\n}\n\nfunction cacheSet(key, value) {\n  return __cache.set(key, value);\n}\n\nfunction cacheClear() {\n  __cache.clear();\n} // state managers\n\n\nconst CONCURRENT_PROMISES = {};\nconst CONCURRENT_PROMISES_TS = {};\nconst FOCUS_REVALIDATORS = {};\nconst CACHE_REVALIDATORS = {};\nconst MUTATION_TS = {}; // error retry\n\nfunction onErrorRetry(_, __, config, revalidate, opts) {\n  if (!isDocumentVisible()) {\n    // if it's hidden, stop\n    // it will auto revalidate when focus\n    return;\n  } // exponential backoff\n\n\n  const count = Math.min(opts.retryCount || 0, 8);\n  const timeout = ~~((Math.random() + 0.5) * (1 << count)) * config.errorRetryInterval;\n  setTimeout(revalidate, timeout, opts);\n} // config\n\n\nconst defaultConfig = {\n  // events\n  onLoadingSlow: () => {},\n  onSuccess: () => {},\n  onError: () => {},\n  onErrorRetry,\n  errorRetryInterval: 5 * 1000,\n  focusThrottleInterval: 5 * 1000,\n  dedupingInterval: 2 * 1000,\n  loadingTimeout: 3 * 1000,\n  refreshInterval: 0,\n  revalidateOnFocus: true,\n  revalidateOnReconnect: true,\n  refreshWhenHidden: false,\n  refreshWhenOffline: false,\n  shouldRetryOnError: true,\n  suspense: false\n};\n\nif (true) {\n  // client side: need to adjust the config\n  // based on the browser status\n  // slow connection (<= 70Kbps)\n  if (navigator['connection']) {\n    if (['slow-2g', '2g'].indexOf(navigator['connection'].effectiveType) !== -1) {\n      defaultConfig.errorRetryInterval = 10 * 1000;\n      defaultConfig.loadingTimeout = 5 * 1000;\n    }\n  }\n} // Focus revalidate\n\n\nlet eventsBinded = false;\n\nif (true && window.addEventListener && !eventsBinded) {\n  const revalidate = () => {\n    if (!isDocumentVisible() || !isOnline()) return;\n\n    for (let key in FOCUS_REVALIDATORS) {\n      if (FOCUS_REVALIDATORS[key][0]) FOCUS_REVALIDATORS[key][0]();\n    }\n  };\n\n  window.addEventListener('visibilitychange', revalidate, false);\n  window.addEventListener('focus', revalidate, false); // only bind the events once\n\n  eventsBinded = true;\n}\n\nexport { CONCURRENT_PROMISES, CONCURRENT_PROMISES_TS, FOCUS_REVALIDATORS, CACHE_REVALIDATORS, MUTATION_TS, cacheGet, cacheSet, cacheClear };\nexport default defaultConfig;","map":null,"metadata":{},"sourceType":"module"}