{"ast":null,"code":"import React, { useCallback, useMemo, useState, useRef } from 'react';\nimport { cacheGet, cacheSet } from './config';\n/*\nThe idea\n\nA \"Page\" component renders the content of 1 API request, it accepts an offset (in this example it's from),\nuses a SWR hook (useSWR(API + '?limit=' + limit + '&from=' + from)) and returns items (Projects).\n\nThe UI:\n      +------------------------------------------+\n      |   Projects                               |\n+------------------------------------------------------+\n|     |   +----------------+                     |     |\n|     |                                          |     |\n|     |   +------------+                         |     |\n|     |                                          |     +--> 1 Page\n|     |   +-----------------+                    |     |\n|     |                                          |     |  /projects/list?limit=4\n|     |   +---------+                            |     |\n+------------------------------------------------------+\n      |                                          |\n      |   +------------+                         |     +  /projects/list?limit=4&from=123\n      |                                          |     |\n      |   +----------------+                     |     |\n      |                                          |     |\n      |   +---------+                            |     |\n      |                                          |     |\n      |   +--------------+                       |     +\n      |                                          |\n      |   +-------------------+                  |     +  /projects/list?limit=4&from=456\n      |                                          |     |\n      |   +------------+                         |     |\n      |                                          |     |\n      |   +----------------+                     |     |\n      |                                          |     |\n      |                                          |     +\n\nThe API\n// (inside `render`)\n\nfunction App () {\n  const {\n    pages,    // an array of each page component\n    pageSWRs, // an array of SWRs of each page\n    isLoadingMore,\n    isReachingEnd,\n    isEmpty,\n    loadMore\n  } = useSWRPages(\n    'project-page', // key of this page\n\n    // ======== the actual Page component!\n    ({ offset, withSWR }) => {\n      // required: use `withSWR` to wrap your main SWR (source of your pagination API)\n      const { data } = withSWR(\n        useSWR(API + '?limit=10&from=' + offset) // request projects with offset\n      )\n      if (!data) return <Placeholder>\n      return data.projects.map(project => <Card project={project} team={team}>)\n    },\n    // ========\n\n    // a function accepts a SWR's `data`, and returns the offset of the next page (or null)\n    data => data && data.length >= 10 ? data[data.length - 1].createdAt : null,\n\n    // (optional) outside deps of your Page component. in this case it's empty\n    []\n  )\n\n  // ...\n\n  if (isEmpty) return <EmptyProjectsPage/>\n\n  return <div>\n    {pages}\n    {isReachingEnd\n      ? null\n      : <button loading={isLoadingMore} onClick={loadMore}>Load More</button>}\n  </div>\n}\n*/\n\nexport function useSWRPages(pageKey, pageFn, SWRToOffset, deps = []) {\n  const pageCountKey = \"_swr_page_count_\" + pageKey;\n  const pageOffsetKey = \"_swr_page_offset_\" + pageKey;\n\n  const _useState = useState(cacheGet(pageCountKey) || 1),\n        pageCount = _useState[0],\n        setPageCount = _useState[1];\n\n  const _useState2 = useState(cacheGet(pageOffsetKey) || [null]),\n        pageOffsets = _useState2[0],\n        setPageOffsets = _useState2[1];\n\n  const _useState3 = useState([]),\n        pageSWRs = _useState3[0],\n        setPageSWRs = _useState3[1];\n\n  const pageCacheRef = useRef([]);\n  const pageFnRef = useRef(pageFn);\n  const emptyPageRef = useRef(false); // Page component (wraps `pageFn`)\n  // for performance reason we need to memorize it\n\n  const Page = useCallback(props => {\n    // render the page component\n    const dataList = pageFnRef.current(props); // if dataList is [], we can assume this page is empty\n    // TODO: this API is not stable\n\n    if (dataList && !dataList.length) {\n      emptyPageRef.current = true;\n    } else {\n      emptyPageRef.current = false;\n    }\n\n    return dataList;\n  }, []); // Doesn't have a next page\n\n  const isReachingEnd = pageOffsets[pageCount] === null;\n  const isLoadingMore = pageCount === pageOffsets.length;\n  const isEmpty = isReachingEnd && pageCount === 1 && emptyPageRef.current;\n  const loadMore = useCallback(() => {\n    if (isLoadingMore || isReachingEnd) return;\n    setPageCount(c => {\n      cacheSet(pageCountKey, c + 1);\n      return c + 1;\n    });\n  }, [isLoadingMore || isReachingEnd]);\n\n  const _pageFn = useCallback(pageFn, deps);\n\n  pageFnRef.current = _pageFn;\n  const pages = useMemo(() => {\n    const getWithSWR = id => swr => {\n      if (!pageSWRs[id] || pageSWRs[id].data !== swr.data || pageSWRs[id].error !== swr.error || pageSWRs[id].revalidate !== swr.revalidate) {\n        setPageSWRs(swrs => {\n          const _swrs = [...swrs];\n          _swrs[id] = {\n            data: swr.data,\n            error: swr.error,\n            revalidate: swr.revalidate,\n            isValidating: swr.isValidating\n          };\n          return _swrs;\n        });\n\n        if (typeof swr.data !== 'undefined') {\n          // set next page's offset\n          const newPageOffset = SWRToOffset(swr, id);\n\n          if (pageOffsets[id + 1] !== newPageOffset) {\n            setPageOffsets(arr => {\n              const _arr = [...arr];\n              _arr[id + 1] = newPageOffset;\n              cacheSet(pageOffsetKey, _arr);\n              return _arr;\n            });\n          }\n        }\n      }\n\n      return swr;\n    }; // render each page\n\n\n    const p = [];\n    const pageCache = pageCacheRef.current;\n\n    for (let i = 0; i < pageCount; ++i) {\n      if (!pageCache[i] || pageCache[i].offset !== pageOffsets[i] || pageCache[i].pageFn !== _pageFn) {\n        // when props change or at init\n        // render the page and cache it\n        pageCache[i] = {\n          component: React.createElement(Page, {\n            key: \"page-\".concat(pageOffsets[i], \"-\").concat(i),\n            offset: pageOffsets[i],\n            withSWR: getWithSWR(i)\n          }),\n          pageFn: _pageFn,\n          offset: pageOffsets[i]\n        };\n      }\n\n      p.push(pageCache[i].component);\n    }\n\n    return p;\n  }, [_pageFn, pageCount, pageSWRs, pageOffsets, pageKey]);\n  return {\n    pages,\n    pageCount,\n    pageSWRs,\n    isLoadingMore,\n    isReachingEnd,\n    isEmpty,\n    loadMore\n  };\n}","map":null,"metadata":{},"sourceType":"module"}