{"version":3,"file":"static/webpack/static/development/pages/widgets.js.b834dc6227fb705eaf88.hot-update.js","sources":["webpack:///./components/core/WeatherCard.js"],"sourcesContent":["import { Card, CardBody } from \"reactstrap\";\nimport { capitalize, getWeatherIcon } from \"../../lib/helpers\";\n\nimport Divider from \"./Divider\";\nimport PropTypes from \"prop-types\";\nimport fetch from \"../../lib/fetch\";\nimport format from \"date-fns/format\";\nimport useSWR from \"swr\";\n\nconst DescriptionItem = ({ title, content }) => (\n  <div className=\"d-flex mb-2 justify-content-between align-items-center\">\n    <span>{title}</span>\n    <small className=\"px-2 d-inline-block\">{content}</small>\n  </div>\n);\n\nconst ForecastItem = ({ content }) => (\n  <span\n    style={{\n      display: \"block\",\n      margin: \"2px 0\"\n    }}\n  >\n    {content}\n  </span>\n);\n\nconst WeatherCard = ({ city, country, days }) => {\n  const { data, error } = useSWR(\n    `${process.env.baseUrl}api/weather?city=${city}&country=${country}&days=${days}`,\n    fetch\n  );\n\n  if (error) return <div>Failed to load data</div>;\n  if (!data) return <div>Loading...</div>;\n\n  return (\n    data && (\n      <Card className=\"mb-4\">\n        <CardBody className=\"pb-0\">\n          <div className=\"d-flex mb-4 justify-content-between align-items-center\">\n            <div>\n              //<h5 className=\"mb-0 font-weight-bold\">{`${data.city.name}, ${data.city.country}`}</h5>\n              <h6 className=\"mb-0\">\n                {format(data.list[0].dt * 1000, \"MMMM Do YYYY\")}\n              </h6>\n              <small>{capitalize(data.list[0].weather[0].description)}</small>\n            </div>\n            <div className=\"text-right\">\n              <h3 className=\"font-weight-light mb-0\">\n                <span>{data.list[0].main.temp}&deg;</span>\n              </h3>\n            </div>\n          </div>\n          <div\n            className=\"d-flex justify-content-between align-items-center\"\n            style={{ flexWrap: \"wrap\" }}\n          >\n            {Object.keys(data.list[0].main).map((key, index) => (\n              <div key={index} style={{ width: \"50%\" }}>\n                <DescriptionItem\n                  title={capitalize(key.replace(/_/g, \" \"))}\n                  content={data.list[0].main[key]}\n                />\n              </div>\n            ))}\n          </div>\n        </CardBody>\n        <Divider text=\"Forecast\" />\n        <CardBody className=\"pt-0\">\n          <div\n            className=\"text-center justify-content-between align-items-center d-flex\"\n            style={{ flexFlow: \"initial\" }}\n          >\n            {data.list.map(\n              (day, index) =>\n                index !== 0 && (\n                  <div\n                    className=\"text-center mb-0 d-flex align-items-center justify-content-center flex-column\"\n                    key={index}\n                  >\n                    <ForecastItem content={format(day.dt * 1000, \"ddd\")} />\n                    <ForecastItem content={day.weather.description} />\n                    <ForecastItem\n                      content={getWeatherIcon(\n                        day.weather[0].icon,\n                        24,\n                        \"rgba(0,0,0,.87)\"\n                      )}\n                    />\n                    <ForecastItem content={`${day.main.temp}Â°`} />\n                  </div>\n                )\n            )}\n          </div>\n        </CardBody>\n      </Card>\n    )\n  );\n};\n\nWeatherCard.propTypes = {\n  city: PropTypes.string,\n  country: PropTypes.string,\n  days: PropTypes.number\n};\n\nexport default WeatherCard;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;;;;A","sourceRoot":""}